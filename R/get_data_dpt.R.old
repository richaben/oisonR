get_data_dpt <- function(dpt_code, login, mdp) {

  cli::cli_h1("Récupération des données OISON")

  ## Connexion url base de l'api
  url_base <- "https://api-oison.ofb.fr/login-check"

  login <- list(
    "_password" = mdp,
    "_username" = login)

  connexion <- httr::POST(url_base,
                          body = login,
                          encode = "json")

  ## Check HTTP Status
  httr::warn_for_status(connexion)

  if (connexion$status_code != 200) {

    cli::cli_alert_danger("Echec connexion - Vérifiez votre login/mdp !")
    } else {

    ## message si connexion OK !
    cli::cli_alert_success("Connexion OISON - OK !")

    ## Recup Token de la connexion
    token <- paste("Bearer", httr::content(connexion)$token, sep = " ")

    ## Headers pour requete
    headers = c(
      `Accept` = 'application/json, text/plain, */*',
      `Accept-Language` = 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7',
      `Authorization` = token,
      `Connection` = 'keep-alive',
      `Content-Type` = 'application/json;charset=UTF-8',
      `Origin` = 'https://oison.ofb.fr',
      `Referer` = 'https://oison.ofb.fr/',
      `Sec-Fetch-Dest` = 'empty',
      `Sec-Fetch-Mode` = 'cors',
      `Sec-Fetch-Site` = 'same-site',
      `User-Agent` = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',
      `sec-ch-ua` = '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"',
      `sec-ch-ua-mobile` = '?0',
      `sec-ch-ua-platform` = '"Windows"'
    )

    ## Body de la pour requete
    body_dpt <-'{
  "entityName":"App\\\\Entity\\\\Data\\\\Observation",
  "filters":[
    {
      "property":{
        "name":"departement",
        "path":[
          "localisation"
        ]
      },
      "filter":{
        "type":"value",
        "negation":false,
        "value":{
          "operator":"=",
          "value":{
            "type":"object",
            "value":{
              "inseeDept":"<<dpt_code>>"
            }
          }
        }
      }
    },
    {
      "property":{
        "name":"type",
        "path":[

        ]
      },
      "filter":{
        "type":"value",
        "value":{
          "operator":"=",
          "value":{
            "type":"string",
            "value":"taxon"
          }
        }
      }
    }
  ],
  "properties":[
    {
      "name":"coObservateur"
    },
    {
      "name":"commentaire"
    },
    {
      "name":"contexteRecherche"
    },
    {
      "name":"objectifRecherche"
    },
    {
      "name":"corineBiotope"
    },
    {
      "name":"date"
    },
    {
      "name":"id"
    },
    {
      "name":"uuid"
    },
    {
      "name":"initiatorUser"
    },
    {
      "name":"taxon"
    },
    {
      "name":"time"
    },
    {
      "name":"type"
    },
    {
      "name":"typeRecherche"
    },
    {
      "name":"status"
    },
    {
      "name":"raisonInvalidation"
    },
    {
      "name":"invalidationCommentaire"
    },
    {
      "name":"apb",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"commune",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"contextePiscicole",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"departement",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"geometry",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"longueurTroncon",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"region",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"sic",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"surfaceStation",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"xPoint",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"yPoint",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"znieff1",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"znieff2",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"zoneHydrographique",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"zps",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"masseEau",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"rnn",
      "path":[
        "localisation"
      ]
    },
    {
      "name":"presence"
    },
    {
      "name":"classeNombreIndividus",
      "path":[
        "recensementsTaxon"
      ]
    },
    {
      "name":"nombreIndividu",
      "path":[
        "recensementsTaxon"
      ]
    },
    {
      "name":"stadeDeveloppement",
      "path":[
        "recensementsTaxon"
      ]
    },
    {
      "name":"vivantTrace",
      "path":[
        "recensementsTaxon"
      ]
    },
    {
      "name":"impactsMilieu"
    },
    {
      "name":"fonctionObservee"
    },
    {
      "name":"impactSuppose"
    },
    {
      "name":"chronicite"
    },
    {
      "name":"activite"
    },
    {
      "name":"perturbation"
    },
    {
      "name":"restauration"
    },
    {
      "name":"id",
      "path":[
        "impactsTaxon"
      ]
    },
    {
      "name":"taxon",
      "path":[
        "impactsTaxon"
      ]
    },
    {
      "name":"classeNombreIndividus",
      "path":[
        "impactsTaxon",
        "recensementsTaxon"
      ]
    },
    {
      "name":"nombreIndividu",
      "path":[
        "impactsTaxon",
        "recensementsTaxon"
      ]
    },
    {
      "name":"stadeDeveloppement",
      "path":[
        "impactsTaxon",
        "recensementsTaxon"
      ]
    },
    {
      "name":"vivantTrace",
      "path":[
        "impactsTaxon",
        "recensementsTaxon"
      ]
    }
  ],
  "first":<<min_req>>, "max":<<max_req>>
}'

    ## requete courte en obs. pour récupérer le nb d'observations total

    min_req <- 1 ; max_req <- 5

    # print(glue::glue(body_dpt, .open = "<<", .close = ">>"))

    response <- httr::POST(url = 'https://api-oison.ofb.fr/queries/execute-data',
                           httr::add_headers(.headers=headers),
                           body = glue::glue(body_dpt, .open = "<<", .close = ">>"))

    cli::cli_progress_step("Collecte données en cou %>% rs...", msg_done = "Fini !")
    #cli::cli_process_start("Collecte données en cours...")


    totalcount <-
      httr::content(response,"text", encoding = "UTF-8") %>%
      jsonlite::fromJSON() %>%
      .$totalCount

    ## Recup donnees limitees (< 2500 obs)
    ## -> utilise la fonction pour creer min/max valeurs requete

    tabCount_req <-
      req_min_max(totalcount) %>%
      #dplyr::mutate(dpt_code = rep(dpt_code, dplyr::n())) %>%
      dplyr::mutate(data_body_req = glue::glue(body_dpt, .open = "<<", .close = ">>"))

    cli::cli_alert_info("Total observations en base : {totalcount} ; Nombre de requête à suivre : {nrow(tabCount_req)}")

    pb <- progress::progress_bar$new(total = nrow(tabCount_req), force = TRUE)



# data_oison_dpt <-
    tabCount_req$data_body_req %>%
      purrr::map_df(
        function(.x) {
          pb$tick()
          httr::POST(url = 'https://api-oison.ofb.fr/queries/execute-data',
                     httr::add_headers(.headers=headers), body = .x) %>%
            httr::content('text',encoding = 'UTF-8') %>%
            jsonlite::fromJSON() %>%
            extract_resultats()
        }
      )


# data_oison_dpt

    }
}
